"  Vim Run Commands file
"  Author:  Erik Fasterius <erik dot fasterius at outlook dot com>
"  URL:     https://github.com/fasterius/dotfiles

" Use vi-noncompatibility (this is redundant in most cases but setting it here
" explicitly for clarity over using the implicit default behaviour)
set nocompatible

" Backups: {{{1

" Backups in '~/.vim/tmp' directory
set backup
set backupdir=~/.vim/tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set backupskip=/tmp/*,/private/tmp/*
set directory=~/.vim/tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set writebackup

" Store undo data in a file
set undofile

" Appearance: {{{1

" Add line numbers
set relativenumber
set number

" Add background highlight to current line
set cursorline

" Cursor appearance
set guicursor=

" Show commands
set showcmd

" General Key Mappings: {{{1

" Set leaders
let maplocalleader=','
let mapleader="\<SPACE>"

" Replace all occurences of word underneath the cursor
map <Leader>s :%s/\<<C-r><C-w>\>//g<Left><Left>

" Open VIMRC file for editing
nmap <Leader>V :sp <CR> :e $MYVIMRC <CR>

" Re-source VIMRC
nmap <Leader>v :source $MYVIMRC <CR>

" Miscellaneous: {{{1

" Enable filetype detection and filetype-specific indentation/plugins
filetype plugin indent on

" Make <BACKSPACE> work as normal
set backspace=indent,eol,start

" Wrap lines at 80 characters
set textwidth=80
set formatoptions+=t

" Use the same indentation as currently on for new lines
set autoindent

" Use UTF-8 encoding
set encoding=utf-8

" Use the system clipboard
set clipboard=unnamed

" Create splits below and to the right
set splitbelow
set splitright

" Movements: {{{1

" Disable arrow key mappings for normal mode
noremap <Up> <NOP>
noremap <Down> <NOP>
noremap <Left> <NOP>
noremap <Right> <NOP>

" Disable arrow key mappings for insert mode
inoremap <Up> <NOP>
inoremap <Down> <NOP>
inoremap <Left> <NOP>
inoremap <Right> <NOP>

" Move by visual lines instead of physical lines
nnoremap j gj
nnoremap k gk

" Also use CTRL-<hjkl> to move to/from Vim terminals
tnoremap <C-J> <C-W><C-J>
tnoremap <C-K> <C-W><C-K>
tnoremap <C-L> <C-W><C-L>
tnoremap <C-H> <C-W><C-H>

" Always keep at least 5 lines above/below scrolling visible
set scrolloff=5

" Plugins: {{{1

" Use vim-plug for plugin management
" (The use of a specific commit for YouCompleteMe is due to subsequent commits
" requiring Mac OSX 10.15 and breaks systems using previous versions)
let data_dir = has('nvim') ? stdpath('data') . '/site' : '~/.vim'
if empty(glob(data_dir . '/autoload/plug.vim'))
    silent execute '!curl -fLo '.data_dir.'/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif
call plug#begin('~/.vim/plugged')
Plug 'dense-analysis/ale',             { 'as': 'ale' }
Plug 'jiangmiao/auto-pairs',           { 'as': 'auto-pairs' }
Plug 'ntpeters/vim-better-whitespace', { 'as': 'better-whitespace' }
Plug 'fasterius/vim-colors-solarized', { 'as': 'colors-solarized' }
Plug 'Konfekt/FastFold',               { 'as': 'fastfold' }
Plug 'airblade/vim-gitgutter',         { 'as': 'gitgutter' }
Plug 'itchyny/vim-gitbranch',          { 'as': 'gitbranch' }
Plug 'scrooloose/nerdcommenter',       { 'as': 'nerdcommenter' }
Plug 'scrooloose/nerdtree',            { 'as': 'nerdtree', 'on': 'NERDTreeToggle' }
Plug 'vim-pandoc/vim-pandoc',          { 'as': 'pandoc' }
Plug 'vim-pandoc/vim-pandoc-syntax',   { 'as': 'pandoc-syntax' }
Plug 'tpope/vim-repeat',               { 'as': 'repeat' }
Plug 'vim-pandoc/vim-rmarkdown',       { 'as': 'rmarkdown' }
Plug 'tmhedberg/SimpylFold',           { 'as': 'simpylfold' }
Plug 'jpalardy/vim-slime',             { 'as': 'slime' }
Plug 'tpope/vim-surround',             { 'as': 'surround' }
Plug 'wellle/targets.vim',             { 'as': 'targets' }
Plug 'christoomey/vim-tmux-navigator', { 'as': 'tmux-navigator' }
Plug 'SirVer/ultisnips',               { 'as': 'ultisnips' }
Plug 'Valloric/YouCompleteMe',         { 'as': 'you-complete-me', 'commit': '14f0d3968c43be7edde15aa67bc600c3998cae16', 'do': 'python3 install.py' }
call plug#end()

" Colour scheme
set t_Co=256  " 256 bit colours
set background=light  " Light background
colorscheme solarized  " Solarized colours

" UltiSnips
let g:UltiSnipsEditSplit = 'context'
let g:UltiSnipsExpandTrigger = '<C-l>' " CTRL-l expands snippets
let g:UltiSnipsSnippetDirectories=[$HOME.'/.vim/snips']

" Open snippets file for current filetype
nnoremap <Leader>n :UltiSnipsEdit <CR>

" NERD Commenter
let g:NERDSpaceDelims = 1  " Add a space after each comment
let g:NERDCommentEmptyLines = 1  " Allow commenting of empty lines
let g:NERDTrimTrailingWhitespace = 1  " Trim trailing whitespace for commenting
let g:NERDCustomDelimiters = { 'snakemake': { 'left': '#' },
                             \ 'nextflow': { 'left': '//' } }

" NERD Tree
let g:NERDTreeQuitOnOpen = 1  " Close NERDTree after opening a file
map <leader>t :NERDTreeToggle<CR>

" FastFold
let g:markdown_folding = 1
let g:r_syntax_folding = 1

" Vim-pandoc
let g:pandoc#formatting#textwidth = 80
let g:pandoc#keyboard#blacklist_submodule_mappings = ['lists']
let g:pandoc#keyboard#use_default_mappings = 0
let g:pandoc#folding#mode = 'expr'  " Use expression folding
let g:pandoc#folding#fold_yaml = 1  " Fold the YAML header
let g:pandoc#folding#fold_fenced_codeblocks = 1  " Fold R code chunks
let g:pandoc#folding#fastfolds = 1  " Use FastFolds for Pandoc folding
let g:ycm_filetype_blacklist = {}  " Clear the YCM filetype blacklist

" Disable conflicting plugin mapping for 'Ã¥' button
let g:AutoPairsShortcutFastWrap = ''

" REPL: {{{1

" General vim-slime settings
let g:slime_target = "tmux"
" let g:slime_default_config = {"socket_name": "default", "target_pane": "{last}"} " This should work according to the documentation, but doesn't.
let b:slime_config = {"socket_name": "default", "target_pane": "{last}"} " Workaround for the problem above
" let g:slime_dont_ask_default = 1 " This doesn't seem to work currently
let g:slime_paste_file = "$HOME/.slime_paste"

" Function for getting the appropriate language for the current filetype
function! GetLanguage()
    if &ft == "rmarkdown" || &ft == "rnoweb" || &ft == "r"
        let language = "r"
    elseif &ft == "python"
        let language = "python"
    else
        let language = "bash"
    endif
    return language
endfunction

" Function for opening a new REPL window
function! OpenTerminal()

    " Open a terminal with appropriate language and move back to starting window
    :silent !tmux split-window -h
    :silent !tmux select-pane -l
    :SlimeConfig
"
    " Get language of current filetype
    let language = GetLanguage()
    if language != "bash"
        :SlimeSend0 language . "\n"
    endif
endfunction

" Function for exiting REPL windows
function! CloseTerminal()

    " Get language of current filetype
    let language = GetLanguage()

    " Close terminal using the appropriate command
    if language == "r"
        :SlimeSend1 quit(save = "no")
    elseif language == "python"
        :SlimeSend1 exit()
    endif
    :SlimeSend1 exit
endfunction

" Function for printing the head of a pandas/R dataframe
function! PrintHead()

    " Get language of current filetype
    let language = GetLanguage()

    " Get the word under the cursor
    let current_word = expand("<cword>")

    " Send appropriate command to REPL
    if language == "r"
        :SlimeSend0 "head(" . current_word . ")\n"
    elseif language == "python"
        :SlimeSend0 current_word . ".head()\n"
    else
        :echo "Error: requires Python or R"
    endif
endfunction

" Function for finding function blocks
function! FindFunction()

    " Get language of current filetype
    let language = GetLanguage()

    " Find appropriate function block depending on language
    if language == "r"
        ?^[a-zA-Z_\.]*[[:space:]]<-[[:space:]]function(
        execute "normal! V"
        /^}
    elseif language == "python"
        ?^def[[:space:]][a-zA-Z0-9_()]*:
        execute "normal! V"
        /^[^# ]
        ?^\s\+\S
    endif
endfunction

" Vim-slime key mappings
nmap <localleader>l <Plug>SlimeLineSend
nmap <localleader>p <Plug>SlimeParagraphSend
xmap <localleader>s <Plug>SlimeRegionSend
nmap <localleader>c <Plug>SlimeSendCell
nmap <localleader>w viw<Plug>SlimeRegionSend
nmap <localleader>a ggVG<Plug>SlimeRegionSend
nmap <localleader>t :call OpenTerminal()<CR>
nmap <localleader>q :call CloseTerminal()<CR>
nmap <localleader>h :call PrintHead()<CR>
nmap <localleader>C :SlimeSend0 "\x03"<CR>
nmap <localleader>f :call FindFunction()<CR><Plug>SlimeRegionSend<CR>

" Search Settings: {{{1

" Search
set incsearch  " Search as characters are entered
set hlsearch  " Highlight searches
set ignorecase  " Case-insensitive searches ...
set smartcase  " ... except when using capital letters

" Cancel a search with <Return>
nnoremap <CR> :noh<CR>

" Statusline: {{{1

" Statusline is always on
set laststatus=2

" Function to get the current Git branch
function! GitBranch()
    let l:branchname = gitbranch#name()
    return strlen(l:branchname) > 0 ? '  '.l:branchname.' ' : ''
endfunction

" Left side
set statusline=                  " Initialise empty statusline

" MODE and corresponding colours
set statusline+=%#StatusLine#%{(mode()=='n')?'\ \ NORMAL\ ':''}
set statusline+=%#pandocStrikeoutTable#%{(mode()=='i')?'\ \ INSERT\ ':''}
set statusline+=%#StatusLineTermNC#%{(mode()=='v')?'\ \ VISUAL\ ':''}
set statusline+=%#StatusLineTermNC#%{(mode()=='s')?'\ \ SELECT\ ':''}
set statusline+=%#pandocStrikeoutHeading#%{(mode()=='r')?'\ \ RPLACE\ ':''}

" Git branch and filename
set statusline+=%#StatusLineNC#  " Light grey
set statusline+=%{GitBranch()}   " Current Git branch
set statusline+=%#CursorColumn#  " Light beige
set statusline+=\ %f             " Filename

" Right side
set statusline+=%=
set statusline+=%#StatusLineNC#  " Light grey
set statusline+=\ %y             " Filetype
set statusline+=\ %3p%%\         " Percentage through file
set statusline+=%#StatusLine#    " Light grey
set statusline+=\ %3l:%2c        " Line:column number
set statusline+=\                " Ending space

" Don't show mode; it's included in the statusline
set noshowmode

" Syntax Highlighting: {{{1

" Enable syntax highlighting
syntax enable

" Python-specific setting to highlight all syntax groups
let python_highlight_all = 1

" Highlight the first character exceeding a linewidth of 80
highlight ColorColumn ctermbg=red ctermfg=white
call matchadd('ColorColumn', '\%81v.', 100)

" Tab Settings: {{{1

" General tab settings
set tabstop=4  " <TAB> is 4 spaces wide
set expandtab  " <TAB> is expanded to spaces
set shiftwidth=4  " Use 4 spaces when indenting with '>'

" Graphical menu for tab-completion of files
set wildmenu

" }}}1

set modelines=1
" vim:foldmethod=marker
