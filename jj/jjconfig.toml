[user]
name = "Erik Fasterius"
email = "erik.fasterius@outlook.com"

[ui]
default-command = ["log", "-T", "my_log_comfortable"]

[aliases]
l = ["log", "-T", "my_log_comfortable", "-r", ".."]

[git]
subprocess = true

[colors]
"bookmarks" = "yellow"
"change_id" = "blue"
"commit_id" = "cyan"
"diff token" = {underline = false}
"author" = "cyan"
"email" = "cyan"
"description" = {bold = true}
"description placeholder" = {fg = "bright red", bold = false, italic = true}
"empty description placeholder" = {fg = "bright red", bold = false, italic = true}
"empty" = {fg = "bright red", bold = false, italic = true}
"git_head" = "yellow"
"git_refsl" = "yellow"
"node working_copy" = { fg = "yellow", bold = true }
"rest" = "bright cyan"
"root" = "yellow"
"timestamp" = "blue"
"working_copy author" = "cyan"
"working_copy bookmarks" = "yellow"
"working_copy change_id" = "blue"
"working_copy commit_id" = "cyan"
"working_copy description placeholder" = {fg = "yellow", bold = true, italic = true}
"working_copy empty description placeholder" = {fg = "yellow", bold = true, italic = true}
"working_copy empty" = {fg = "yellow", bold = true, italic = true}
"working_copy timestamp" = "blue"

[template-aliases]
# Based on the built-in `builtin_log_comfortable`
'my_log_comfortable' = '''
if(root,
  format_root_commit(self),
  label(if(current_working_copy, "working_copy"),
    concat(
      my_format_short_commit_header(self) ++ "\n",
      separate(" ",
        if(empty, label("empty", "(empty)")),
        if(description,
          description.first_line(),
          label(if(empty, "empty"), description_placeholder),
        ) ++ "\n",
      ) ++ "\n",
    ),
  )
)
'''

# Based on the built-in `format_short_commit_header`
'my_format_short_commit_header(commit)' = '''
separate(" ",
  format_short_change_id_with_hidden_and_divergent_info(commit),
  format_short_signature_name(commit.author()),
  format_timestamp(commit_timestamp(commit)),
  format_short_commit_id(commit.commit_id()),
  commit.bookmarks(),
  commit.tags(),
  commit.working_copies(),
  if(commit.git_head(), label("git_head", "git_head()")),
  if(commit.conflict(), label("conflict", "conflict")),
  if(config("ui.show-cryptographic-signatures").as_boolean(),
    format_short_cryptographic_signature(commit.signature())),
)
'''

# Based on built-in `format_short_signature`
'format_short_signature_name(signature)' = '''
  coalesce(signature.name(), name_placeholder)
'''
